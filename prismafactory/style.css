/* 
  Neon ASCII-Style Refactor
  =========================
  - Retains the same DOM structure, classes, and layout.
  - Uses ASCII characters, neon colors, and glow effects.
  - Does not break any game functionality.
*/

body {
    background: #000;
    color: #0ff;
    font-family: monospace;
    margin: 0;
    padding: 0 1rem;
  }
  h1 {
    color: #f0f;
  }
  
  /* Grid container stays 10x10, each cell is 32px. */
  #grid {
    display: grid;
    grid-template-columns: repeat(10, 32px);
    grid-template-rows: repeat(10, 32px);
    gap: 2px;
    margin-top: 1rem;
    user-select: none;
  }
  
  /* Each cell in the grid. 
     We'll position ASCII text in the center using :before. */
  .cell {
    position: relative;
    width: 32px;
    height: 32px;
    background: #000;
    border: 1px solid #333;
    box-sizing: border-box;
    text-align: center;
    overflow: hidden;
    /* We rely on .cell:before or child elements for ASCII. */
  }
  
  /* Default ASCII placeholder for any cell that doesn't override. */
  .cell::before {
    content: ' ';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #333;
    font-size: 1rem;
    text-shadow: none;
  }
  
  /* 
    BUILDINGS / SPECIAL CELL TYPES
    ===============================
    We replace background colors with ASCII + neon text.
  */
  
  /* Empty */
  .empty::before {
    content: '.';             /* A faint dot for empty space */
    color: #222;
  }
  
  /* Source cell */
  .source::before {
    content: 'S';
    color: #f0f;
    text-shadow: 0 0 5px #f0f;
  }
  
  /* Resource node */
  .resource-node::before {
    content: 'R'; 
    color: #0f0;
    text-shadow: 0 0 5px #0f0;
  }
  
  /* Conveyor */
  .conveyor::before {
    content: '=';
    color: #0ff;
    text-shadow: 0 0 5px #0ff;
  }
  
  /* Extractor */
  .extractor::before {
    content: 'E';
    color: #ff0;
    text-shadow: 0 0 5px #ff0;
  }
  
  /* Processor */
  .processor::before {
    content: 'P';
    color: #f0f;
    text-shadow: 0 0 5px #f0f;
  }
  
  /* Assembler */
  .assembler::before {
    content: 'A';
    color: #ff6600;
    text-shadow: 0 0 5px #ff6600;
  }
  
  /* Storage */
  .storage::before {
    content: 'S';
    color: #66f;
    text-shadow: 0 0 5px #66f;
  }
  
  /* Merger */
  .merger::before {
    content: 'M';
    color: #44f;
    text-shadow: 0 0 5px #44f;
  }
  
  /* Splitter */
  .splitter::before {
    content: 'X';
    color: #f44;
    text-shadow: 0 0 5px #f44;
  }
  
  /* Accumulator */
  .accumulator::before {
    content: 'U';
    color: #f0f;
    text-shadow: 0 0 6px #f0f;
  }
  
  /* Power Pole */
  .powerPole::before {
    content: '|';
    color: #fff;
    text-shadow: 0 0 5px #fff;
  }
  
  /* Portal */
  .portal::before {
    content: 'O';
    color: #0ff;
    text-shadow: 0 0 5px #0ff;
  }
  
  /* 
    SPECIAL HIGHLIGHTS / EFFECTS
    ============================
  */
  
  /* Player cell gets a white border */
  .player-cell {
    outline: 2px solid #fff;
  }
  
  /* If you want the cell to glow when powered, we apply a neon glow. */
  .powered-cell {
    box-shadow: inset 0 0 10px 2px rgba(0,255,255,0.5);
  }
  
  /* When within playerâ€™s interaction range */
  .in-range {
    box-shadow: inset 0 0 5px 2px rgba(255,255,0,0.2);
  }
  
  /* 
    ITEM INDICATORS 
    ===============
    The game appends a child <div class="item-indicator item-raw|item-processed|item-final">.
    We'll style them with ASCII letters in neon colors.
  */
  .item-indicator {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 1rem;
    pointer-events: none;
  }
  
  /* Default ASCII for item indicator (fallback) */
  .item-indicator::before {
    content: '?';
    color: #ccc;
    text-shadow: 0 0 4px #ccc;
  }
  
  /* Raw item -> 'r' in bright yellow */
  .item-raw::before {
    content: 'r';
    color: #ff0;
    text-shadow: 0 0 5px #ff0;
  }
  
  /* Processed item -> 'p' in cyan */
  .item-processed::before {
    content: 'p';
    color: #0ff;
    text-shadow: 0 0 5px #0ff;
  }
  
  /* Final item -> 'F' in magenta */
  .item-final::before {
    content: 'F';
    color: #f0f;
    text-shadow: 0 0 5px #f0f;
  }
  
  /*
    For storages, the game appends a nested container with multiple .item-indicator
    We keep them small icons, each an ASCII letter.
  */
  .storage-items {
    position: absolute;
    top: 2px;
    left: 2px;
    right: 2px;
    bottom: 2px;
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
    justify-content: flex-start;
  }
  .storage-items .item-indicator {
    width: 12px;
    height: 12px;
    font-size: 0.7rem;
  }
  
  /* 
    The arrow is appended as a child .arrow inside the cell. 
    We'll color it neon yellow for direction indicators.
  */
  .arrow {
    color: #ff0;
    text-shadow: 0 0 5px #ff0;
    position: absolute;
    top: 2px;
    right: 2px;
    font-weight: bold;
    pointer-events: none;
  }
  
  /* 
    BLUEPRINT PREVIEW
    =================
    This is the translucent overlay that appears when hovering with a building selected.
  */
  .blueprint-preview {
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    background: transparent;
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  /* We'll show a large ASCII plus arrow for the blueprint */
  .blueprint-preview::before {
    content: attr(class);
    /* We intentionally do not rely on "class" for content in real code, 
       but to keep a purely ASCII aesthetic demonstration, 
       you could refine. For simplicity, let's just do a placeholder. */
    content: ''; /* Fallback: no text. 
                   If you'd like, you can do content: '?' or something here. */
    color: #0ff;
    text-shadow: 0 0 5px #0ff;
    font-size: 1.2rem;
  }
  
  /* The arrow within a blueprint preview is also neon. */
  .blueprint-preview .arrow {
    color: #0ff !important;
    text-shadow: 0 0 5px #0ff !important;
  }
  
  /* 
    ACTION BUTTONS / TOOLBAR
    =========================
  */
  .toolbar {
    margin-top: 0.5rem;
  }
  
  .selected-action {
    outline: 2px solid #ff0;
  }
  
  /*
    MESSAGE LOG
    ===========
  */
  .message-log {
    margin-top: 1rem;
    max-height: 100px;
    overflow-y: auto;
    border: 1px solid #555;
    padding: 4px;
    font-size: 0.9rem;
    background: #111;
    color: #0ff;
    text-shadow: 0 0 3px #0ff;
  }
  